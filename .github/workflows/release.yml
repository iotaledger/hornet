name: Release

on:
  release:
    types: [published]

jobs:
  binaries:
    name: Release Binaries
    runs-on: ubuntu-latest
    container:
      image: gohornet/goreleaser-cgo-cross-compiler:1.18.1
      volumes: [/repo]
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Release HORNET
        run: goreleaser --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}

  docker:
    name: Release Docker
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: iotaledger/hornet
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push to Dockerhub
        uses: docker/build-push-action@v2
        with:
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Prepare files
        run: |
          yq -i 'del(.services.hornet.build)' docker-compose.yml
          yq -i '.services.hornet.image = "gohornet/hornet:${{ steps.meta.outputs.version }}"' docker-compose.yml
          yq -i 'del(.services.create-snapshots.build)' private_tangle/docker-compose.yml
          yq -i 'del(.services.hornet-coo.build)' private_tangle/docker-compose.yml
          yq -i '.services.create-snapshots.image = "gohornet/hornet:${{ steps.meta.outputs.version }}"' private_tangle/docker-compose.yml
          yq -i '.services.hornet-coo.image = "gohornet/hornet:${{ steps.meta.outputs.version }}"' private_tangle/docker-compose.yml
          yq -i '.services.hornet-2.image = "gohornet/hornet:${{ steps.meta.outputs.version }}"' private_tangle/docker-compose.yml
          yq -i '.services.hornet-3.image = "gohornet/hornet:${{ steps.meta.outputs.version }}"' private_tangle/docker-compose.yml
          yq -i '.services.hornet-4.image = "gohornet/hornet:${{ steps.meta.outputs.version }}"' private_tangle/docker-compose.yml

      - name: Create docker-compose.zip
        uses: vimtor/action-zip@v1
        with:
          files: .release/ config.json peering.json docker-compose.yml
          recursive: true
          dest: docker-compose.zip

      - name: Upload docker-compose.zip file
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: docker-compose.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create private_tangle.zip file
        uses: vimtor/action-zip@v1
        with:
          files: private_tangle/
          recursive: true
          dest: private_tangle.zip

      - name: Upload private_tangle.zip file
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: private_tangle.zip
          token: ${{ secrets.GITHUB_TOKEN }}

