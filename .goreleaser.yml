# Documentation at http://goreleaser.com

# Project name
project_name: HORNET

# Environment variables
env:
  - GO111MODULE=on

# Builds
builds:
  # Linux AMD64
  - id: hornet-linux-amd64
    binary: hornet
    env:
      - CGO_ENABLED=1
    ldflags:
      - -s -w -X github.com/gohornet/hornet/plugins/cli.AppVersion={{.Version}}
    flags:
      - -tags=pow_avx
    main: main.go
    goos:
      - linux
    goarch:
      - amd64
  # Linux ARM64 statically linked
  - id: hornet-linux-arm64
    binary: hornet
    env:
      - CGO_ENABLED=1
      - CC=aarch64-linux-musl-gcc
    ldflags:
      - -s -w -X github.com/gohornet/hornet/plugins/cli.AppVersion={{.Version}}
      - -w -extldflags "-static"
    flags:
      - -tags=pow_arm_c128
    main: main.go
    goos:
      - linux
    goarch:
      - arm64
  # Windows AMD64
  - id: hornet-windows-amd64
    binary: hornet
    env:
      - CGO_ENABLED=1
      - CC=x86_64-w64-mingw32-gcc
      - CXX=x86_64-w64-mingw32-g++
    ldflags:
      - -s -w -X github.com/gohornet/hornet/plugins/cli.AppVersion={{.Version}}
    flags:
      - -tags=pow_avx
    main: main.go
    goos:
      - windows
    goarch:
      - amd64
  # macOS AMD64
  - id: hornet-macOS-amd64
    binary: hornet
    env:
      - CGO_ENABLED=0
    ldflags:
      - -s -w -X github.com/gohornet/hornet/plugins/cli.AppVersion={{.Version}}
    main: main.go
    goos:
      - darwin
    goarch:
      - amd64

# Docker
dockers:
  # Docker AMD64
  - goos: linux
    goarch: amd64
    image_templates:
      - "gohornet/hornet:latest"
      - "gohornet/hornet:{{ .Tag }}"
    binaries:
      - hornet
    dockerfile: docker/Dockerfile.goreleaser
    skip_push: auto

# Archives
archives:
  - format: tar.gz
    wrap_in_directory: true
    format_overrides:
      - goos: windows
        format: zip
    name_template: "{{.ProjectName}}-{{.Version}}_{{.Os}}_{{.Arch}}"
    replacements:
      amd64: x86_64
      arm64: ARM64
      darwin: macOS
      linux: Linux
      windows: Windows
    files:
      - README.md
      - LICENSE
      - config.json
      - config_comnet.json
      - config_devnet.json
      - peering.json
      - profiles.json
      - mqtt_config.json

# DEB and RPM packages
nfpms:
  - id: nfpm
    package_name: hornet
    file_name_template: '{{ tolower .ProjectName }}_{{ replace .Version "v" "" }}_{{ .Arch }}'
    vendor: GoReleaser
    license: Apache 2.0
    maintainer: GoHORNET
    homepage: https://github.com/gohornet/hornet
    description: HORNET is a powerful IOTA fullnode software.
    formats:
      - deb
      - rpm
    bindir: /usr/bin
    files:
      "nfpm/shared_files/hornet.service": "/lib/systemd/system/hornet.service"
    config_files:
      "config.json": "/var/lib/hornet/config.json"
      "config_comnet.json": "/var/lib/hornet/config_comnet.json"
      "config_devnet.json": "/var/lib/hornet/config_devnet.json"
      "mqtt_config.json": "/var/lib/hornet/mqtt_config.json"
      "peering.json": "/var/lib/hornet/peering.json"
      "profiles.json": "/var/lib/hornet/profiles.json"
      "nfpm/shared_files/hornet.env": "/etc/default/hornet"
    dependencies:
      - systemd
      - wget
      - bash
    scripts:
      preremove: "nfpm/deb_files/prerm"
      postremove: "nfpm/deb_files/postrm"
      preinstall: "nfpm/deb_files/preinst"
      postinstall: "nfpm/deb_files/postinst"
    overrides:
      rpm:
        replacements:
          amd64: x86_64
        file_name_template: "{{ tolower .ProjectName }}-{{ .Version }}-{{ .Arch }}"
        scripts:
          preinstall: "nfpm/rpm_files/preinst"
          postinstall: "nfpm/rpm_files/postinst"
          preremove: "nfpm/rpm_files/prerm"
          postremove: "nfpm/rpm_files/postrm"

# Checksum
checksum:
  name_template: "checksums.txt"

# Snapshot
snapshot:
  name_template: "{{ .Tag }}"

# Changelog
changelog:
  skip: true

# Release
release:
  prerelease: auto
  name_template: "{{.ProjectName}}-{{.Version}}"
  github:
    owner: gohornet
    name: hornet
